using UnityEngine;
using UnityEngine.AI;
using NPC.NPCAnimations;          // ← enum Walk / Drink / …
// ← et le bus NPCAnimBus

class NPCMovementWalk : NPCMovementStrategy
{
    private readonly float _minWander;
    private readonly float _maxWander;
    private Vector3 targetPos;

    public NPCMovementWalk(NPCMovement npcMovement,
        float minWanderDistance,
        float maxWanderDistance)
        : base(npcMovement)
    {
        _minWander = minWanderDistance;
        _maxWander = maxWanderDistance;

        // On calcule déjà la cible, mais tu pourrais aussi
        // le faire dans StartMovement si tu veux.
        Vector3 rnd = Random.insideUnitSphere * Random.Range(_minWander, _maxWander);
        targetPos = rnd + npcMovement.Manager.transform.position;
    }

    /* =========== Lancement =========== */
    public override void StartMovement()
    {
        if (NavMesh.SamplePosition(targetPos, out NavMeshHit hit, _maxWander, NavMesh.AllAreas))
        {
            _mainAgent.SetDestination(hit.position);
            _mainAgent.stoppingDistance = 0f;

            /* --- Notifie l’Animator : Walk ON --- */
            NPCAnimBus.Bool(npcMovement.Manager.gameObject,
                NPCAnimationsType.Walk,
                true);
        }
    }

    /* =========== Fin du déplacement =========== */
    public override bool IsDone
    {
        get
        {
            bool done = base.IsDone;              // vérif de la classe mère
            if (done)
            {
                /* --- Notifie l’Animator : Walk OFF --- */
                NPCAnimBus.Bool(npcMovement.Manager.gameObject,
                    NPCAnimationsType.Walk,
                    false);
            }
            return done;
        }
    }
}