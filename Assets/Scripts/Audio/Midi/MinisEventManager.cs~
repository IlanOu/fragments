using System;
using UnityEngine;
using MidiJack;

namespace Minis
{
    public class MinisEventManager : MonoBehaviour
    {
        private static MinisEventManager _instance;
        public static MinisEventManager Instance => _instance;

        public event Action<MidiInput> OnNoteOn;
        public event Action<MidiInput> OnNoteOff;
        public event Action<MidiInput> OnControlChange;

        private void Awake()
        {
            if (_instance != null && _instance != this)
            {
                Destroy(gameObject);
                return;
            }
            _instance = this;
            
            DontDestroyOnLoad(gameObject);
        }

        private void Start()
        {
            // Debug.Log("=== MinisEventManager démarré avec MidiJack ===");
            
            // S'abonner aux événements MidiJack
            MidiMaster.noteOnDelegate += HandleNoteOn;
            MidiMaster.noteOffDelegate += HandleNoteOff;
            MidiMaster.knobDelegate += HandleControlChange;
        }
        
        private void OnDestroy()
        {
            // Nettoyer les abonnements
            MidiMaster.noteOnDelegate -= HandleNoteOn;
            MidiMaster.noteOffDelegate -= HandleNoteOff;
            MidiMaster.knobDelegate -= HandleControlChange;
        }

        private void HandleNoteOn(MidiChannel channel, int note, float velocity)
        {
            // Debug.Log($"NOTE ON - Note: {note}, Vélocité: {velocity}");
            
            var midiInput = new MidiInput
            {
                Number = note,
                ShortName = $"Note {note}",
                Channel = (int)channel,
                Velocity = velocity,
                Value = velocity  // Pour les notes, Value peut être égale à Velocity
            };
            
            OnNoteOn?.Invoke(midiInput);
        }

        private void HandleNoteOff(MidiChannel channel, int note)
        {
            // Debug.Log($"NOTE OFF - Note: {note}");
            
            var midiInput = new MidiInput
            {
                Number = note,
                ShortName = $"Note {note}",
                Channel = (int)channel,
                Velocity = 0,
                Value = 0
            };
            
            OnNoteOff?.Invoke(midiInput);
        }

        private void HandleControlChange(MidiChannel channel, int knobNumber, float knobValue)
        {
            // MidiJack fournit des valeurs entre 0 et 1, mais votre système attend des valeurs entre 0 et 127
            float scaledValue = knobValue * 127f;
    
            // Debug.Log($"CONTROL CHANGE REÇU - CC: {knobNumber}, Canal: {(int)channel}, Valeur: {scaledValue}/127");
    
            var midiInput = new MidiInput
            {
                Number = knobNumber,
                ShortName = $"CC {knobNumber}",
                Channel = (int)channel,
                Velocity = 0,
                Value = scaledValue
            };
    
            // Debug.Log($"ENVOI D'ÉVÉNEMENT OnControlChange - Number: {midiInput.Number}, Channel: {midiInput.Channel}");
            OnControlChange?.Invoke(midiInput);
        }
    }
}